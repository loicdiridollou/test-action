name: Read docs for newly created tag

on:
  push:
    tags:
      - "v*"

jobs:
  print_title_of_pr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Extract docs for given tag
        shell: python
        id: get_docs
        env:
          tag: v1.1.1
        run: |
          import os
          import re
          import uuid
          from pathlib import Path

          rgx = re.compile(r'## Version \d+\.\d+\.\d+')
          v_major_minor = '.'.join(os.environ['tag'].split('.')[:2])
          body = Path(f'doc/whatsnew/{v_major_minor}.md').read_text()
          cur_v = rgx.search(body)
          prev_v = rgx.search(body, cur_v.end())
          result = body[cur_v.start() : prev_v.start()]

          def set_multiline_output(name, value):
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  delimiter = uuid.uuid1()
                  print(f'{name}<<{delimiter}', file=fh)
                  print(value, file=fh)
                  print(delimiter, file=fh)

          set_multiline_output('test_report', result)
      - name: Set output
        id: vars
        run: echo "tag=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
      - name: Create release
        id: split
        shell: bash
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer  ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/loicdiridollou/test-action/releases \
            -d '{"tag_name": "${{ github.ref }}",
                 "target_commitish":"main",
                 "name": "${{ steps.vars.outputs.tag }}",
                 "body": "${{ steps.get_docs.outputs.test_report }}",
                 "draft": false,
                 "prerelease": false,
                 "generate_release_notes": false}'
